.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Analizo::Command::files_graph 3pm"
.TH Analizo::Command::files_graph 3pm "2024-01-25" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
analizo\-files\-graph \- dependency graph generator among files
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\&  analizo files\-graph [OPTIONS] <input> [<input> [<input> ...]]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
analizo files-graph reads the dependency information from one or more source code
directories passed as arguments, and produces as output the graph of
dependencies between the files of the software in the \fBgraphviz\fR\|(1) format.
.PP
analizo files-graph is part of the analizo suite and was implemented to
represent the old analizo dsm output tool in a textual format, as the dsm tool
is going to be removed from analizo suite. The dependency graph includes
relationships among files including function calls, inheritances and attribute
use.
.PP
analizo files-graph is part of the analizo suite.
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
.IP "<input>..." 4
.IX Item "<input>..."
The input directories (or files) with source code to be processed.
.Sp
Although you can pass individual files as input, this tool is more useful if
you pass entire source directories.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-output <file>, \-o <file>" 4
.IX Item "--output <file>, -o <file>"
Use a file as output
.SH "VIEWING THE GRAPH"
.IX Header "VIEWING THE GRAPH"
See \fB\fBanalizo\-graph\fB\|(1)\fR.
.SH "READING THE GRAPH"
.IX Header "READING THE GRAPH"
See \fB\fBanalizo\-graph\fB\|(1)\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fB\fBdotty\fB\|(1)\fR, \fB\fBdot\fB\|(1)\fR, \fB\fBneato\fB\|(1)\fR, \fB\fBanalizo\fB\|(1)\fR
.SH "COPYRIGHT AND AUTHORS"
.IX Header "COPYRIGHT AND AUTHORS"
See \fB\fBanalizo\fB\|(1)\fR.
