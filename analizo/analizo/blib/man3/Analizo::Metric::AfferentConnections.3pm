.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Analizo::Metric::AfferentConnections 3pm"
.TH Analizo::Metric::AfferentConnections 3pm "2024-01-25" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Analizo::Metric::AfferentConnections \- Afferent Connections per Class (ACC) metric
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The metric calculation is based on the following article and calculates the
class connectivity.
.PP
PhD Thesis: \fIMonitoramento de metricas de codigo-fonte em projetos de software livre\fR
by Paulo Roberto Miranda Meirelles.
.PP
See the adaptation of the paragraph about Afferent Connections per Class in
the article:
.PP
Measures the connectivity of a class. If a class \f(CW\*(C`Ci\*(C'\fR access a method or
attribute of a class \f(CW\*(C`Cj\*(C'\fR, consider \f(CW\*(C`Ci\*(C'\fR a client of the supplier class
\&\f(CW\*(C`Cj\*(C'\fR, denoting \f(CW\*(C`Ci => Cj\*(C'\fR.  Consider the follow function:
.PP
.Vb 2
\&  client(Ci, Cj) = 1, if (Ci => Cj) and (Ci != Cj)
\&  client(Ci, Cj) = 0, otherwise.
.Ve
.PP
So \f(CW\*(C`ACC(Cj) = (sum(client(Ci, Cj)), i = 1 to N)\*(C'\fR, where \f(CW\*(C`N\*(C'\fR is the total
number of system classes. If the value of this metric is large, a change in the
class has substantially more side effects, making maintenance more difficult.
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "\(bu" 4
Monitoramento de metricas de codigo-fonte em projetos de software livre <https://www.teses.usp.br/teses/disponiveis/45/45134/tde-27082013-090242>
